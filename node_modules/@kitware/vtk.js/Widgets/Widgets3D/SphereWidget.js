import { f as distance2BetweenPoints } from '../../Common/Core/Math/index.js';
import vtkAbstractWidgetFactory from '../Core/AbstractWidgetFactory.js';
import vtkPlanePointManipulator from '../Manipulators/PlaneManipulator.js';
import vtkSphereHandleRepresentation from '../Representations/SphereHandleRepresentation.js';
import vtkSphereContextRepresentation from '../Representations/SphereContextRepresentation.js';
import macro from '../../macros.js';
import widgetBehavior from './SphereWidget/behavior.js';
import stateGenerator from './SphereWidget/state.js';

function vtkSphereWidget(publicAPI, model) {
  model.classHierarchy.push('vtkSphereWidget');
  model.behavior = widgetBehavior;

  publicAPI.getRepresentationsForViewType = function (viewType) {
    return [{
      builder: vtkSphereHandleRepresentation,
      labels: ['moveHandle'],
      initialValues: {
        scaleInPixels: true
      }
    }, {
      builder: vtkSphereHandleRepresentation,
      labels: ['centerHandle'],
      initialValues: {
        scaleInPixels: true
      }
    }, {
      builder: vtkSphereHandleRepresentation,
      labels: ['borderHandle'],
      initialValues: {
        scaleInPixels: true
      }
    }, {
      builder: vtkSphereContextRepresentation,
      labels: ['sphereHandle']
    }];
  };

  publicAPI.getRadius = function () {
    var h1 = model.widgetState.getCenterHandle();
    var h2 = model.widgetState.getBorderHandle();
    return Math.sqrt(distance2BetweenPoints(h1.getOrigin(), h2.getOrigin()));
  };

  model.manipulator = vtkPlanePointManipulator.newInstance();
  model.widgetState = stateGenerator();
}

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, {}, initialValues);
  vtkAbstractWidgetFactory.extend(publicAPI, model, initialValues);
  macro.setGet(publicAPI, model, ['manipulator', 'widgetState']);
  vtkSphereWidget(publicAPI, model);
}
var newInstance = macro.newInstance(extend, 'vtkSphereWidget');
var index = {
  newInstance: newInstance,
  extend: extend
};

export { index as default, extend, newInstance };

import { newInstance as newInstance$1, obj, setGet, get } from '../../macros.js';
import vtkWebGPUBufferManager from './BufferManager.js';
import vtkWebGPUShaderCache from './ShaderCache.js';
import vtkWebGPUTextureManager from './TextureManager.js';

// vtkWebGPUDevice methods
// ----------------------------------------------------------------------------

function vtkWebGPUDevice(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkWebGPUDevice');

  publicAPI.initialize = function (handle) {
    model.handle = handle;
  };

  publicAPI.createCommandEncoder = function () {
    return model.handle.createCommandEncoder();
  };

  publicAPI.submitCommandEncoder = function (commandEncoder) {
    model.handle.queue.submit([commandEncoder.finish()]);
  };

  publicAPI.getShaderModule = function (sd) {
    return model.shaderCache.getShaderModule(sd);
  };
  /* eslint-disable no-bitwise */

  /* eslint-disable no-undef */


  publicAPI.getBindGroupLayout = function (val) {
    if (!val.entries) {
      return null;
    } // add in basic required values if missing


    for (var i = 0; i < val.entries.length; i++) {
      var ent = val.entries[i];
      ent.binding = ent.binding || 0;
      ent.visibility = ent.visibility || GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT;
    } // do we already have one?


    var sval = JSON.stringify(val);

    for (var _i = 0; _i < model.bindGroupLayouts.length; _i++) {
      if (model.bindGroupLayouts[_i].sval === sval) {
        return model.bindGroupLayouts[_i].layout;
      }
    } // create one and store it


    var layout = model.handle.createBindGroupLayout(val); // we actually only store the stringified version
    // as that is what we always compare against

    model.bindGroupLayouts.push({
      sval: sval,
      layout: layout
    });
    return layout;
  };

  publicAPI.getBindGroupLayoutDescription = function (layout) {
    for (var i = 0; i < model.bindGroupLayouts.length; i++) {
      if (model.bindGroupLayouts[i].layout === layout) {
        return model.bindGroupLayouts[i].sval;
      }
    }

    vtkErrorMacro('layout not found');
    console.trace();
    return null;
  };

  publicAPI.getPipeline = function (hash) {
    if (hash in model.pipelines) {
      return model.pipelines[hash];
    }

    return null;
  };

  publicAPI.createPipeline = function (hash, pipeline) {
    pipeline.initialize(publicAPI, hash);
    model.pipelines[hash] = pipeline;
  };

  publicAPI.onSubmittedWorkDone = function () {
    return model.handle.queue.onSubmittedWorkDone();
  }; // The Device has an object cache that can be used to cache buffers,
  // textures and other objects that can be shared. The basic approach is to
  // call getCachedObject with a request and a create function. The request
  // must have two fields a hash and an owner. The owner is what the weak
  // map uses to hold onto the cached object. When the owner is deleted the
  // cached object will be freed from the cache. The cache lookup just
  // returns any entry that has a matching owner and hash. If a match isn't
  // found then the create function is called with any extra arguments.
  //
  // For best memory management it is important that the owner be as close
  // to the underlying object as possible. For example for a point data buffer
  // you would want the actual vtkDataArray to be the owner, not the polydata
  // or even worse the actor. As the points data array could be freed wihtout
  // the polydata or actor being freed.
  // is the object already cached?


  publicAPI.hasCachedObject = function (owner, hash) {
    if (!owner) {
      return false;
    } // if a matching request already exists then return true


    if (model.objectCache.has(owner)) {
      var objects = model.objectCache.get(owner);

      for (var i = 0; i < objects.length; i++) {
        if (hash === objects[i].hash) {
          return true;
        }
      }
    }

    return false;
  };

  publicAPI.getCachedObject = function (owner, hash, creator) {
    if (!owner || !hash) {
      vtkErrorMacro('attempt to cache an object without an owner or hash');
      return null;
    } // if a matching request already exists then return the cached object


    if (model.objectCache.has(owner)) {
      var _objects = model.objectCache.get(owner);

      for (var i = 0; i < _objects.length; i++) {
        if (hash === _objects[i].hash) {
          return _objects[i].object;
        }
      }
    } // otherwise create the object and cache it


    for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      args[_key - 3] = arguments[_key];
    }

    var createdObject = creator.apply(void 0, args);

    if (!model.objectCache.has(owner)) {
      model.objectCache.set(owner, []);
    }

    var objects = model.objectCache.get(owner);
    objects.push({
      hash: hash,
      object: createdObject
    });
    return createdObject;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  handle: null,
  pipelines: null,
  shaderCache: null,
  bindGroupLayouts: null,
  bufferManager: null,
  textureManager: null
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API

  obj(publicAPI, model);
  setGet(publicAPI, model, ['handle']);
  get(publicAPI, model, ['bufferManager', 'shaderCache', 'textureManager']); // this is a cache, and a cache with GC pretty much means WeakMap

  model.objectCache = new WeakMap();
  model.shaderCache = vtkWebGPUShaderCache.newInstance();
  model.shaderCache.setDevice(publicAPI);
  model.bindGroupLayouts = [];
  model.bufferManager = vtkWebGPUBufferManager.newInstance();
  model.bufferManager.setDevice(publicAPI);
  model.textureManager = vtkWebGPUTextureManager.newInstance();
  model.textureManager.setDevice(publicAPI);
  model.pipelines = {}; // For more macro methods, see "Sources/macros.js"
  // Object specific methods

  vtkWebGPUDevice(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = newInstance$1(extend, 'vtkWebGPUDevice'); // ----------------------------------------------------------------------------

var vtkWebGPUDevice$1 = {
  newInstance: newInstance,
  extend: extend
};

export { vtkWebGPUDevice$1 as default, extend, newInstance };
